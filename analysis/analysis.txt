Kyle Berlind
kab109
Fritz Thelusca
ft34

Questions here will come from the assignment
writeup. Be sure to copy paste questions and 
your explanations before you push to GitHub and
do that before uploading to Gradescope

Question 1: are the benchmark timings for StringStrand consistent with the explanation 
below that the time to execute cutAndSplice is O((b^2)S)? 

Yes, the benchmark timing for StringStrand consistent with the explanation 
below that the time to execute cutAndSplice is O((b^2)S). We can see that 
when b is held constant, as is the case in cut and splice, the time complexity
increases linearly with the size of splicee (which is increasing be a factor of
2^N). so the running time analysis is consistent with an O((b^2)S) time complexity, 
because when b is held constant we would expect the run time to depend exclusively
on s => O(S). this is reflected in the benchmark run below.


dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringStrand:	            256	      4,800,471	0.640	1290
StringStrand:	            512	      4,965,591	0.549	1290
StringStrand:	          1,024	      5,295,831	0.631	1290
StringStrand:	          2,048	      5,956,311	0.691	1290
StringStrand:	          4,096	      7,277,271	0.854	1290
StringStrand:	          8,192	      9,919,191	1.146	1290
StringStrand:	         16,384	     15,203,031	1.812	1290
StringStrand:	         32,768	     25,770,711	3.268	1290
StringStrand:	         65,536	     46,906,071	6.339	1290
StringStrand:	        131,072	     89,176,791	13.233	1290
StringStrand:	        262,144	    173,718,231	26.152	1290
StringStrand:	        524,288	    342,801,111	48.390	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at StringStrand.append(StringStrand.java:70)
	at IDnaStrand.cutAndSplice(IDnaStrand.java:41)
	at DNABenchmark.lambda$0(DNABenchmark.java:76)
	at DNABenchmark$$Lambda$142/1427651360.run(Unknown Source)
	at java.base/java.lang.Thread.run(Thread.java:844)
	at DNABenchmark.strandSpliceBenchmark(DNABenchmark.java:79)
	at DNABenchmark.main(DNABenchmark.java:113)

Question 2: are the benchmark timings for StringBuilderStrand consistent with the explanation 
below that the time to execute cutAndSplice is O(bS)? 

Yes, the benchmark timings for StringBuilderStrand consistent with the explanation 
below that the time to execute cutAndSplice is O(bS). This is for a similar reason
as part Question 1. Because b is held constant in the benchmark, we can see that 
the time complexity increases linearly with the size of splicee (which increases
by a factor of 2^n for every run. we can really only see this relationship develop
in the runs with a sufficiently large size of splicee, I guessing because java is 
gaining some sort of efficiency through its VM that is hiding the relationship. Either way 
we can see starting at 8,192 splices that the time increases by a factor of 2^n, so 
it scales linearly with S. therefore the runtime when b is held constant would be 
O(S), which is consistent with an overall time complexity of O(bS).

dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	               			 splicee	  recomb	time	appends
-----
StringBuilderStrand:	            256	      4,800,471	0.035	1290
StringBuilderStrand:	            512	      4,965,591	0.025	1290
StringBuilderStrand:	          1,024	      5,295,831	0.013	1290
StringBuilderStrand:	          2,048	      5,956,311	0.012	1290
StringBuilderStrand:	          4,096	      7,277,271	0.008	1290
StringBuilderStrand:	          8,192	      9,919,191	0.007	1290
StringBuilderStrand:	         16,384	     15,203,031	0.015	1290
StringBuilderStrand:	         32,768	     25,770,711	0.026	1290
StringBuilderStrand:	         65,536	     46,906,071	0.040	1290
StringBuilderStrand:	        131,072	     89,176,791	0.104	1290
StringBuilderStrand:	        262,144	    173,718,231	0.231	1290
StringBuilderStrand:	        524,288	    342,801,111	0.300	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3744)
	at java.base/java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:146)
	at java.base/java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:512)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:141)
	at StringBuilderStrand.append(StringBuilderStrand.java:70)
	at IDnaStrand.cutAndSplice(IDnaStrand.java:41)
	at DNABenchmark.strandSpliceBenchmark(DNABenchmark.java:67)
	at DNABenchmark.main(DNABenchmark.java:113)



Question 3: Explain why the time for LinkStrand does not change much at all over all the runs in the
benchmark program. Explain why you think memory is exhausted at the specific strand size you see in 
your timings -- as compared to exhaustion for String and StringBuilder.

The time for LinkStrand does not change much at all over all the runs in the benchmark program because LinkStrand
is a linked list which can add a node. Therefore its time complexity is not dependent on the size of splicee, and we
see that it is able to cut and splice in constant time (in the benchmark conditions. Memory is exhausted at the 
specific strand size seen in LinkStand which is greater than the exhaustion for String and StringBuilder because 
LinkStrand creates one new strand and appends segments to the new strand while the other two classes are creating 
a new strand and copying the old each time a new segment is to be added. LinkStrand gains a space complexity advantage
over the other algorithms because it does not need to make a new stringbbuilder object every time it cuts and splices,
rather it simply makes the spliced nodes point to a single stingbuilder object, which will be used to replace all of the 
appropriate sequences. LinkStrand will use constant space to store the Splicee, while String and StringBuilder will use
O(Splice(N)) space where N is the number of splices. Therefore it makes sense that LinkStrand is able to process sequences
that are much larger. The specific number that it stops at is indicative of the fact that the heap is indivative of the fact
that the String and StringBuilder must take up 1000 times as much memory at that point.

O(N) space complexity while the other algorithnms function in O(N^2) space complexity.

 dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	  recomb	time	appends
-----
LinkStrand:	            256	      4,800,471	0.038	1290
LinkStrand:	            512	      4,965,591	0.027	1290
LinkStrand:	          1,024	      5,295,831	0.004	1290
LinkStrand:	          2,048	      5,956,311	0.005	1290
LinkStrand:	          4,096	      7,277,271	0.007	1290
LinkStrand:	          8,192	      9,919,191	0.005	1290
LinkStrand:	         16,384	     15,203,031	0.004	1290
LinkStrand:	         32,768	     25,770,711	0.006	1290
LinkStrand:	         65,536	     46,906,071	0.005	1290
LinkStrand:	        131,072	     89,176,791	0.005	1290
LinkStrand:	        262,144	    173,718,231	0.004	1290
LinkStrand:	        524,288	    342,801,111	0.005	1290
LinkStrand:	      1,048,576	    680,966,871	0.007	1290
LinkStrand:	      2,097,152	  1,357,298,391	0.005	1290
LinkStrand:	      4,194,304	  2,709,961,431	0.008	1290
LinkStrand:	      8,388,608	  5,415,287,511	0.006	1290
LinkStrand:	     16,777,216	 10,825,939,671	0.006	1290
LinkStrand:	     33,554,432	 21,647,243,991	0.008	1290
LinkStrand:	     67,108,864	 43,289,852,631	0.006	1290
LinkStrand:	    134,217,728	 86,575,069,911	0.006	1290
LinkStrand:	    268,435,456	173,145,504,471	0.006	1290
LinkStrand:	    536,870,912	346,286,373,591	0.012	1290
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.Arrays.copyOf(Arrays.java:3744)
	at java.base/java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:146)
	at java.base/java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:512)
	at java.base/java.lang.StringBuilder.append(StringBuilder.java:141)
	at DNABenchmark.main(DNABenchmark.java:110)